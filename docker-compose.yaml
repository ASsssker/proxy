services:
  proxy:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile.proxy
    env_file: .env
    ports:
      - "${PROXY_PORT}:${PROXY_PORT}"
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_started

  requester:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile.requester
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_started

  db:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    
  broker:
    image: nats:latest
    container_name: nats_server
    command: >
      -m ${NATS_MONITOR_PORT}
      --store_dir /data
    volumes:
      - broker_data:/data
    restart: unless-stopped
 
  nats_exporter:
    image: natsio/prometheus-nats-exporter:latest
    container_name: nats_exporter
    command: >
      -addr ${NATS_EXPORTER_HOST}
      -p ${NATS_EXPORTER_PORT}
      -varz
      -connz
      -routez
      -subz
      -healthz
      http://${NATS_HOST}:${NATS_MONITOR_PORT}
    depends_on:
      broker:
        condition: service_started
    restart: unless-stopped

    # image: rabbitmq:3.12-management
    # container_name: rabbitmq
    # hostname: rabbitmq
    # ports:
    #   - "${RABBIT_AMQP_PORT}:${RABBIT_AMQP_PORT}"
    #   - "${RABBIT_UI_PORT}:${RABBIT_UI_PORT}"
    # volumes:
    #   - broker_data:/var/lib/rabbitmq
    # environment:
    #   - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
    #   - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
    # healthcheck:
    #   test: rabbitmq-diagnostics -q ping
    #   interval: 10s
    #   timeout: 20s
    #   retries: 3
    # restart: unless-stopped

  prometheus:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile.prometheus
    container_name: prometheus
    hostname: prometheus
    ports:
      - "${PROMETHEUS_EXTERNAL_PORT}:9090"
    volumes:
      - prometheus_data:/etc/prometheus
    depends_on:
      requester:
        condition: service_started
    restart: unless-stopped

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    ports:
      - "${GRAFANA_MONITORING_PORT}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    env_file: .env

volumes:
  postgres_data:
  broker_data:
  prometheus_data:
  grafana_data:
