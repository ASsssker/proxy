// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUwW7bOBD9FWJ2gb0IkbObveiWAkHQU4MmPQWBwZBji4lEsuTIiWHo34uhFFu25DZB",
	"iqAnW+TM8M2b92YDytXeWbQUodhAVCXWMv29CMEF/uOD8xjIYDrWGFUwnoyz/Elrj1BApGDsEtoMkNPm",
	"ymkcXBtLuMQAbZtBwO+NCaihuB0G32Uvwe7+ARVxrRsZH8cI7p1eTz5dotQYUozU2jBEWV3t5Y5yRm/W",
	"SKXTHIu2qRnk5cUNZHD15fpmAHJXoQnVROWDRjloW/tYq18xNhW9oWHlLKGleYV2SeUU37+JlJLIzyNJ",
	"auLR0WZg9GS1Lm/IqHYWIQNj5z44hTFCrxvIwOLTBM0HdBoN27pjNjna2IUbyTX1IXxwz2sRMayMYhhk",
	"qOL0w/MVhtilnZ7MTmbcivNopTdQwH/pKAMvqUy95Z6BFhtYYhohEyz52c8aCrgydnm9rRwwemdjx/6/",
	"sxn/9LNMc/K+Miol5w+x81lnzLE2duSOGZugZZ+OHpGIJAOhTkmxqWsZ1oPbEmVFpSpRPaaIfHWa04sz",
	"XZzo9lzrZN1uaBjpU6/gVzf5d8AFFPBXvltPeb+b8lS6bTtN7BF5+g4iJ8X7GhIZjpBaoxaxUazmRVNV",
	"a5bL2RtH+7Ouu3U89X6JgschnmQU1pFQASWhzgSVKJKthInC2fTdRAz/RBGNRkb4/0cg/Gbx2aMi1D2c",
	"HgtbDUOPZU9651oLKXrxpO72lJdvjG6Peu0SabBN2aJB1khpCd5uwDAkti0vG1mnHaZhuF8oNJgNmj4U",
	"xd07HfwrcffIj8w6pFvhFonD7eSH2hMBFZoVO5pFePYBImQYLL6Fa6z+g5V1iZQidizyexWSsUshX6TW",
	"tj8CAAD//2xh/N0ZCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
