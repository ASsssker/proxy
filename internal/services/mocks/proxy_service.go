// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/proxy_service.go
//
// Generated by this command:
//
//	mockgen --source internal/services/proxy_service.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	models "github.com/ASsssker/proxy/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskProvider is a mock of TaskProvider interface.
type MockTaskProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTaskProviderMockRecorder
	isgomock struct{}
}

// MockTaskProviderMockRecorder is the mock recorder for MockTaskProvider.
type MockTaskProviderMockRecorder struct {
	mock *MockTaskProvider
}

// NewMockTaskProvider creates a new mock instance.
func NewMockTaskProvider(ctrl *gomock.Controller) *MockTaskProvider {
	mock := &MockTaskProvider{ctrl: ctrl}
	mock.recorder = &MockTaskProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskProvider) EXPECT() *MockTaskProviderMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockTaskProvider) AddTask(ctx context.Context, taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask.
func (mr *MockTaskProviderMockRecorder) AddTask(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockTaskProvider)(nil).AddTask), ctx, taskID)
}

// Close mocks base method.
func (m *MockTaskProvider) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTaskProviderMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTaskProvider)(nil).Close), ctx)
}

// GetTask mocks base method.
func (m *MockTaskProvider) GetTask(ctx context.Context, taskID string) (models.TaskResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, taskID)
	ret0, _ := ret[0].(models.TaskResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskProviderMockRecorder) GetTask(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTaskProvider)(nil).GetTask), ctx, taskID)
}

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
	isgomock struct{}
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMessageSender) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMessageSenderMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMessageSender)(nil).Close), ctx)
}

// SendTask mocks base method.
func (m *MockMessageSender) SendTask(ctx context.Context, task models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTask indicates an expected call of SendTask.
func (mr *MockMessageSenderMockRecorder) SendTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTask", reflect.TypeOf((*MockMessageSender)(nil).SendTask), ctx, task)
}
